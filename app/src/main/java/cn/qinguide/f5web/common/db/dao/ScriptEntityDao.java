package cn.qinguide.f5web.common.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.qinguide.f5web.common.entity.ScriptEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCRIPT_ENTITY".
*/
public class ScriptEntityDao extends AbstractDao<ScriptEntity, Long> {

    public static final String TABLENAME = "SCRIPT_ENTITY";

    /**
     * Properties of entity ScriptEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScriptId = new Property(1, String.class, "scriptId", false, "SCRIPT_ID");
        public final static Property ScriptName = new Property(2, String.class, "scriptName", false, "SCRIPT_NAME");
        public final static Property SupportPage = new Property(3, String.class, "supportPage", false, "SUPPORT_PAGE");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property Times = new Property(6, Integer.class, "times", false, "TIMES");
        public final static Property UpdateTime = new Property(7, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property CreateTime = new Property(8, String.class, "createTime", false, "CREATE_TIME");
        public final static Property State = new Property(9, String.class, "state", false, "STATE");
        public final static Property IconUrl = new Property(10, String.class, "iconUrl", false, "ICON_URL");
        public final static Property Script = new Property(11, String.class, "script", false, "SCRIPT");
        public final static Property Author = new Property(12, String.class, "author", false, "AUTHOR");
        public final static Property ScriptDescription = new Property(13, String.class, "scriptDescription", false, "SCRIPT_DESCRIPTION");
        public final static Property IsEnabled = new Property(14, boolean.class, "isEnabled", false, "IS_ENABLED");
    }


    public ScriptEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScriptEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCRIPT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SCRIPT_ID\" TEXT," + // 1: scriptId
                "\"SCRIPT_NAME\" TEXT," + // 2: scriptName
                "\"SUPPORT_PAGE\" TEXT," + // 3: supportPage
                "\"USER_ID\" TEXT," + // 4: userId
                "\"VERSION\" TEXT," + // 5: version
                "\"TIMES\" INTEGER," + // 6: times
                "\"UPDATE_TIME\" TEXT," + // 7: updateTime
                "\"CREATE_TIME\" TEXT," + // 8: createTime
                "\"STATE\" TEXT," + // 9: state
                "\"ICON_URL\" TEXT," + // 10: iconUrl
                "\"SCRIPT\" TEXT," + // 11: script
                "\"AUTHOR\" TEXT," + // 12: author
                "\"SCRIPT_DESCRIPTION\" TEXT," + // 13: scriptDescription
                "\"IS_ENABLED\" INTEGER NOT NULL );"); // 14: isEnabled
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCRIPT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScriptEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scriptId = entity.getScriptId();
        if (scriptId != null) {
            stmt.bindString(2, scriptId);
        }
 
        String scriptName = entity.getScriptName();
        if (scriptName != null) {
            stmt.bindString(3, scriptName);
        }
 
        String supportPage = entity.getSupportPage();
        if (supportPage != null) {
            stmt.bindString(4, supportPage);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        Integer times = entity.getTimes();
        if (times != null) {
            stmt.bindLong(7, times);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(9, createTime);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(11, iconUrl);
        }
 
        String script = entity.getScript();
        if (script != null) {
            stmt.bindString(12, script);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(13, author);
        }
 
        String scriptDescription = entity.getScriptDescription();
        if (scriptDescription != null) {
            stmt.bindString(14, scriptDescription);
        }
        stmt.bindLong(15, entity.getIsEnabled() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScriptEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String scriptId = entity.getScriptId();
        if (scriptId != null) {
            stmt.bindString(2, scriptId);
        }
 
        String scriptName = entity.getScriptName();
        if (scriptName != null) {
            stmt.bindString(3, scriptName);
        }
 
        String supportPage = entity.getSupportPage();
        if (supportPage != null) {
            stmt.bindString(4, supportPage);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        Integer times = entity.getTimes();
        if (times != null) {
            stmt.bindLong(7, times);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(8, updateTime);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(9, createTime);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(11, iconUrl);
        }
 
        String script = entity.getScript();
        if (script != null) {
            stmt.bindString(12, script);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(13, author);
        }
 
        String scriptDescription = entity.getScriptDescription();
        if (scriptDescription != null) {
            stmt.bindString(14, scriptDescription);
        }
        stmt.bindLong(15, entity.getIsEnabled() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScriptEntity readEntity(Cursor cursor, int offset) {
        ScriptEntity entity = new ScriptEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scriptId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // scriptName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // supportPage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // version
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // times
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // createTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // state
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // iconUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // script
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // author
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // scriptDescription
            cursor.getShort(offset + 14) != 0 // isEnabled
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScriptEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScriptId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScriptName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSupportPage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimes(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUpdateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIconUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScript(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAuthor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setScriptDescription(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsEnabled(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScriptEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScriptEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScriptEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
